import tkinter as tk
from tkinter import filedialog, messagebox
import yara
import os

# Set up the GUI window
root = tk.Tk()
root.title("YARA Malware Scanner")
root.geometry("800x600")  # Increased window width and height even more

# Variable to store the selected file path
selected_file_path = ""

# Function to handle file upload
def upload_file():
    global selected_file_path
    selected_file_path = filedialog.askopenfilename(
        title="Select a File",
        filetypes=(("Executable Files", "*.exe"), ("All Files", "*.*"))
    )
    if selected_file_path:
        file_label.config(text=f"Selected File: {os.path.basename(selected_file_path)}")
        result_text.delete(1.0, tk.END)  # Clear previous results
    else:
        file_label.config(text="No file selected")

# Function to scan the file with YARA rules
def scan_file():
    if not selected_file_path:
        messagebox.showwarning("Warning", "Please select a file first!")
        return

    # Path to the YARA rule file (must be in the same directory or specify full path)
    yara_rule_path = "advanced_malware_analysis.yara"

    # Check if the YARA rule file exists
    if not os.path.exists(yara_rule_path):
        messagebox.showerror("Error", f"YARA rule file '{yara_rule_path}' not found!")
        return

    try:
        # Load the YARA rules
        rules = yara.compile(filepath=yara_rule_path)

        # Scan the selected file
        matches = rules.match(selected_file_path)

        # Display the results with color formatting
        result_text.delete(1.0, tk.END)  # Clear previous text

        # Define tags for color formatting
        result_text.tag_config("suspicious_header", foreground="red", font=("Arial", 14, "bold"))
        result_text.tag_config("rule_name", foreground="blue", font=("Arial", 12, "bold"))
        result_text.tag_config("description", foreground="gray", font=("Arial", 11, "italic"))
        result_text.tag_config("indicator_header", foreground="purple", font=("Arial", 12, "bold"))
        result_text.tag_config("indicator_detail", foreground="black", font=("Arial", 11))
        result_text.tag_config("indicator_name", foreground="black", font=("Arial", 11, "bold"))
        result_text.tag_config("not_suspicious_header", foreground="green", font=("Arial", 14, "bold"))


        # Indicator descriptions
        indicator_descriptions = {
            "$reg1": "Registry API - RegCreateKey (Registry Key Creation)",
            "$reg2": "Registry API - RegSetValue (Set Registry Value)",
            "$reg3": "Registry API - RegDeleteKey (Delete Registry Key)", # Added description for reg3
            "$reg_suspicious": "Suspicious Registry Key Path (Software\\Malicious)",
            "$file1": "File API - CreateFile (File Creation)",
            "$file2": "File API - WriteFile (Write to File)",
            "$file_suspicious": "Suspicious File Path (System32 directory)",
            "$net1": "Network API - InternetOpen (Initialize Internet)",
            "$net2": "Network API - HttpSendRequest (Send HTTP Request)",
            "$net_suspicious": "Suspicious Network Indicator (http:// URL)",
            "$proc1": "Process API - CreateProcess (Process Creation)",
            "$proc2": "Process API - ShellExecute (Execute Shell Command)",
            "$proc_suspicious": "Suspicious Process Name (cmd.exe)",
            "$mal1": "Malware Keyword - keylogger",
            "$mal2": "Malware Keyword - backdoor",
            "$mal3": "Malware Keyword - trojan",
            "$obf1": "Obfuscation Indicator - UPX packer",
            "$pack1": "Packing Indicator - UPX Packer",
            "$pack2": "Packing Indicator - ASPack Packer",
            "$obf2": "Obfuscation Indicator - rol (Bit Rotation)",
            "$obf3": "Obfuscation Indicator - VirtualAlloc (Memory Allocation)",
            "$enc1": "Encryption API - CryptEncrypt (Encrypt Data)",
            "$enc2": "Encryption API - CryptDecrypt (Decrypt Data)",
            "$enc3": "Encryption Algorithm - AES",
            "$enc4": "Encryption Algorithm - RSA",
            "$enc5": "Encryption API - CryptGenKey (Key Generation)",
            "$antidbg1": "Anti-Debugging - IsDebuggerPresent (Debugger Check)",
            "$antidbg2": "Anti-Debugging - NtQueryInformationProcess (Process Info Check)",
            "$antidbg3": "Anti-Debugging - CheckRemoteDebuggerPresent (Remote Debug Check)",
            "$antidbg4": "Anti-Debugging - OutputDebugString (Timing Trick)",
            "$antidbg5": "Anti-Debugging - GetTickCount (Timing-based Anti-debug)",
            "$poly1": "Polymorphism - GetProcAddress (Dynamic Function Loading)",
            "$poly2": "Polymorphism - LoadLibrary (Dynamic Library Loading)",
            "$poly3": "Polymorphism - VirtualProtect (Memory Protection Modification)",
            "$poly4": "Polymorphism - WriteProcessMemory (Memory Modification)",
            "$inj1": "Code Injection - CreateRemoteThread (Thread Injection)",
            "$inj2": "Code Hooking - SetWindowsHookEx (Windows Hooking)",
            "$inj3": "Code Hooking - CallNextHookEx (Hooking Continuation)",
            "$inj4": "Code Injection - SetThreadContext (Context Manipulation)",
            "$mal4": "Malware Keyword - ransomware",
            "$mal5": "Malware Keyword - spyware",
            "$mal6": "Malware Keyword - rootkit"
        }


        if matches:
            result_text.insert(tk.END, "Analysis Result:\n", "suspicious_header") # Apply tag "suspicious_header"
            result_text.insert(tk.END, "-----------------\n")
            result_text.insert(tk.END, "This file is suspicious!\n\n", "suspicious_header") # Apply tag "suspicious_header"
            for match in matches:
                result_text.insert(tk.END, f"Rule Matched: {match.rule}\n", "rule_name") # Apply tag "rule_name"
                result_text.insert(tk.END, f"Description: {match.meta.get('description', 'No description')}\n", "description") # Apply tag "description"
                result_text.insert(tk.END, "Matched Indicators:\n", "indicator_header") # Apply tag "indicator_header"
                result_text.insert(tk.END, "------------------\n")
                for string_match in match.strings:
                    identifier = string_match.identifier
                    description = indicator_descriptions.get(identifier, "No description available") # Get description from dictionary

                    result_text.insert(tk.END, f"- Indicator: ", "indicator_detail") # Apply tag "indicator_detail"
                    result_text.insert(tk.END, f"{identifier} ", "indicator_name") # Apply tag "indicator_name" (bold)
                    result_text.insert(tk.END, f"({description})\n", "indicator_detail") # Apply tag "indicator_detail"
                    result_text.insert(tk.END, "-" * 70 + "\n") # Increased separator line length even more
                result_text.insert(tk.END, "-" * 80 + "\n") # Increased overall separator line length even more
        else:
            result_text.insert(tk.END, "Analysis Result:\n", "not_suspicious_header") # Apply tag "not_suspicious_header"
            result_text.insert(tk.END, "-----------------\n")
            result_text.insert(tk.END, "This file is not suspicious.\n", "not_suspicious_header") # Apply tag "not_suspicious_header"
            result_text.insert(tk.END, "No malicious behavior detected based on the current rules.\n", "not_suspicious_header") # Apply tag "not_suspicious_header"

    except yara.Error as e:
        messagebox.showerror("Error", f"YARA error: {str(e)}")
    except Exception as e:
        messagebox.showerror("Error", f"An unexpected error occurred: {str(e)}")

# GUI elements
# Title label
title_label = tk.Label(root, text="YARA Malware Scanner", font=("Arial", 16, "bold"))
title_label.pack(pady=10)

# Upload file button
upload_button = tk.Button(root, text="Upload File", command=upload_file, width=20)
upload_button.pack(pady=10)

# Label to display the selected file name
file_label = tk.Label(root, text="No file selected", wraplength=750) # Increased wraplength even more
file_label.pack(pady=5)

# Scan file button
scan_button = tk.Button(root, text="Scan File", command=scan_file, width=20)
scan_button.pack(pady=10)

# Text area to display scan results - Increased height and width here!
result_text = tk.Text(root, height=20, width=100, wrap="word", font=("Arial", 12)) # Increased height to 20 and width to 100
result_text.pack(pady=10)

# Start the GUI event loop
root.mainloop()
